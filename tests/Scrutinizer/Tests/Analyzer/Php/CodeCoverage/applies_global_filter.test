<?php

namespace Moo;

class FooBar
{
    public function foo($a)
    {
        $foo = function(Bar $bar) {
            return 'bar';
        };

        return $a ? 'foo' : $foo(new Bar);
    }
}

-- FILENAME --
src/Foo.php

-- FILE: lib/Bar.php --
<?php

namespace Moo;

class Bar {
    public function __construct() { }
}

-- FILE: tests/FooTest.php --
<?php

namespace Moo;

class FooTest extends \PHPUnit_Framework_TestCase
{
    public function testFoo()
    {
        $foo = new FooBar();
        $this->assertEquals('foo', $foo->foo(true));
        $this->assertEquals('bar', $foo->foo(false));
    }
}

-- FILE: bootstrap.php --
<?php

require_once __DIR__.'/src/Foo.php';
require_once __DIR__.'/lib/Bar.php';

-- FILE: phpunit.xml --
<?xml version="1.0" encoding="UTF-8"?>
<phpunit bootstrap="bootstrap.php">
    <testsuites>
        <testsuite name="Test Suite">
            <directory>./tests</directory>
        </testsuite>
    </testsuites>
</phpunit>

-- CONFIG --
filter:
    excluded_paths: [lib/*]

tools:
    php_code_coverage: true

-- LINE ATTRIBUTES --
Line 9: {"coverage_count":1}
Line 10: {"coverage_count":1}
Line 11: {"coverage_count":1}
Line 13: {"coverage_count":1}

-- PROJECT-METRICS --
'php_code_coverage.files': 1
'php_code_coverage.lines_of_code': 14
'php_code_coverage.non_comment_lines_of_code': 14
'php_code_coverage.classes': 1
'php_code_coverage.methods': 1
'php_code_coverage.covered_methods': 1
'php_code_coverage.conditionals': 0
'php_code_coverage.covered_conditionals': 0
'php_code_coverage.statements': 3
'php_code_coverage.covered_statements': 3
'php_code_coverage.elements': 4
'php_code_coverage.covered_elements': 4

-- CODE-ELEMENTS --
package(Moo):
    children:
        - class(Moo\FooBar)

class(Moo\FooBar):
    location:
        filename: src/Foo.php
        start_line: 5
        end_line: 15

    metrics:
        'php_code_coverage.methods': 0
        'php_code_coverage.covered_methods': 0
        'php_code_coverage.conditionals': 0
        'php_code_coverage.covered_conditionals': 0
        'php_code_coverage.statements': 2
        'php_code_coverage.covered_statements': 2
        'php_code_coverage.elements': 3
        'php_code_coverage.covered_elements': 3
        'php_code_coverage.coverage': 1
